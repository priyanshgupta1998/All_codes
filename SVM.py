# -*- coding: utf-8 -*-
"""TensorFlow with GPU

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/gpu.ipynb
"""

import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn import svm

digits = datasets.load_digits()
print(digits.data)  #two dimensional array ----full complete dataset

digits.data[:]    # full dataset (all rows) with two dimensional array

digits.data[:2]  # two rows are printed

digits.data[:1797]  # complete dataset with 1797 rows

digits.data[:1796]  # dataset upto second last row

digits.data[:-1]  # dataset upto second last row

len(digits.data)

len(digits.data[0])  # no . of elements in first row

len(digits.data[-1])  # no. of elements in last row of the dataset

plt.imshow(digits.data)

np.shape(digits.data)   #1797 rows and each rows has 64 elements

digits.images  #complete dataset with 3-dimensional array

np.shape(digits.images)   # 1797 Blocks and each block has 8 rows and 8 columns

len(digits.images)

digits.target

len(digits.target)

np.shape(digits.target)  # 1797 columns and 1 row

digits.target[:8]  # target value array upto 8 columns

digits.target[:1796]   #  target value array upto second last column

digits.target[:-1]   #  target value array upto second last column

clf = svm.SVC(gamma=0.001 , C=100)

x,y = digits.data[:-1] , digits.target[:-1]   #x is two dimensional and y is one dimensional

print(x,y)

print(x.shape)
print(y.shape)

#y.shape = [1796,1]

print(y)

#y.shape = [-1, 1]
#y

y.shape

print(x,y)

clf.fit(x,y)

print(clf.predict(digits.data[[-1]]))  # predict the target value of the last row of the digits.data

plt.imshow(digits.images[-1])  # image of last blocks of 8x8 of digits.images

plt.imshow(digits.images[-1] , cmap=plt.cm.gray_r , interpolation='nearest')  # image shows 8

plt.imshow(digits.images[-2] , cmap=plt.cm.gray_r , interpolation='nearest')  # image shows 9

plt.imshow(digits.images[0] , cmap=plt.cm.gray_r , interpolation='nearest')  # image shows 0

pre = svm.SVC(gamma=0.001 , C=100)

l,p = digits.data[:-10] , digits.target[:-10]

print(l.shape)
print(p.shape)

pre.fit(l,p)

print(pre.predict(digits.data[[-1]]))  # predict the target value of the last row of the digits.data

print(clf.predict(digits.data[[-2]]))  # predict the target value of the last row of the digits.data









